// --------- BEGIN RUNBOX LICENSE ---------
// Copyright (C) 2016-2018 Runbox Solutions AS (runbox.com).
// 
// This file is part of Runbox 7.
// 
// Runbox 7 is free software: You can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation, either version 3 of the License, or (at your
// option) any later version.
// 
// Runbox 7 is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Runbox 7. If not, see <https://www.gnu.org/licenses/>.
// ---------- END RUNBOX LICENSE ----------
import { timeout, share } from 'rxjs/operators';
import { Observable } from 'rxjs';
import { of } from 'rxjs';
import { RMM } from '../rmm';
import { AccountSecuritySession } from './account-security-session';
import { AccountSecurityACL } from './account-security-acl';
import { AccountSecurityUnlockCode } from './account-security-unlock-code';
import { AccountSecurityDevice } from './account-security-device';
import { AccountSecurity2fa } from './account-security-2fa';
import { AccountSecurityAppPass } from './account-security-app-pass';
import { AccountSecurityService } from './account-security-service';

export class AccountSecurity {

    constructor(
        public app: RMM,
    ) {
        this.session = new AccountSecuritySession(app);
        this.acl = new AccountSecurityACL(app);
        this.unlock_code = new AccountSecurityUnlockCode(app);
        this.device = new AccountSecurityDevice(app);
        this.tfa = new AccountSecurity2fa(app);
        this.app_pass = new AccountSecurityAppPass(app);
        this.service = new AccountSecurityService(app);
    }
    user_password: string;
    is_busy = false;
    public session: AccountSecuritySession;
    public acl: AccountSecurityACL;
    public unlock_code: AccountSecurityUnlockCode;
    public device: AccountSecurityDevice;
    public tfa: AccountSecurity2fa;
    public app_pass: AccountSecurityAppPass;
    public service: AccountSecurityService;

    months: any = [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December'
    ];

    txt_header: any = () => {
         const txt =
         '                                                                              \n'
        + '    __________                                                                \n'
        + '   /          \\ ___                                                           \n'
        + '  /      / ___/\\   \\____ ______         ______                                \n'
        + '  \\        \\__\\/   /    \\      \\  _____/_    /\\                    ______     \n'
        + '  /____/     /\\         /\\      \\/      /\\  /_/___  ________ ___  /     /\\    \n'
        + '  \\___/_____/ /________/ /  /\\_________/ /        \\         \\   \\/     / /    \n'
        + '      \\_____\\/\\________\\/__/ /\\________\\/    /    /\\    /   /\\         \\/     \n'
        + '                  \\________\\/          \\_________/ /_______/ /  /\\      \\     \n'
        + '                                        \\________\\/\\_______\\/__/ /\\  AS  \\    \n'
        + '                                                          \\____\\/  \\_____/\\   \n'
        + '                                                                    \\____\\/   \n';
        return txt;
    }

    txt_footer: any = () => {
        const dt = new Date();
        const dt_str = [
            (dt.getMonth() + 1).toString(),
            (dt.getDate()).toString(),
            (dt.getFullYear()).toString()
        ].join('/');
        const txt =
               '                                                                              \n'
            +  ' https://runbox.com                 Generated by Runbox at ' + dt_str + ' \n';
        return txt;
    }

    check_password(): Observable<any> {
        this.is_busy = true;
        const data = {
            password: this.user_password,
        };
        const req = this.app.ua.http.post('/ajax/ajax_mfa_check_password', data).pipe(timeout(60000), share());
        req.subscribe(
          reply => {
            this.is_busy = false;
            if ( reply['status'] === 'error' ) {
                this.app.show_error( reply['error'].join( '' ), 'Dismiss' );
                return;
            }
            return;
          },
          error => {
            this.is_busy = false;
            return this.app.show_error('Could not check password.', 'Dismiss');
          }
        );
        return req;
    }

}
